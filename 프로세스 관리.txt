프로세스(Process)
프로세스의 문맥(context)
 CPU 수행 상태를 나타내는 하드웨어 문맥(Program Counter, 각종 register) 프로세스의 주소 공간(code, data, stack)
프로세스 관련 커널 자료 구조(PCB, Kernel stack)

프로세스는 상태(state)
Running : CPU를 잡고 instruction을 수행중인 상태

Ready : CPU를 기다리는 상태(메모리 등 다른 조건을 모두 만족)

Blocked(wait, sleep) : CPU를 주어도 당장 instruction을 수행할 수 없는 상태, Process 가 준 요청을 바로 처리할 수 없는 상황
본격적인 process 상태가 아님 - New : 생성중, Terminated : 종료중

Suspended(stopped) : 외부적인 이유로 프로세스의 수행이 정지된 상태, 프로세스는 통째로 디스크에 swap out, 중기 스케줄러에 의해서


PCB(Process Control Block)
운영체제가 각 프로세스를 관리하기 위해 프로세스당 유지하는 정보
구조체 유지
OS가 관리상 사용하는 정보 - Process state

문맥 교환 (Context Switch)
CPU를 한 프로세스에서 다른 프로세스로 넘겨주는 과정
CPU가 다른 프로세스에서 넘어갈 때 내어주는 프로세스의 상태를 그 프로세스의 PCB에 저장하고 새롭게 얻은 프로세스의 PCB를 읽어옴.

(예 : 프로그램 A에서 프로그램 B로 CPU 이동되는 경우 문맥교환에 해당. timer Interrupt나 I/O요청 system call이 일어나는 경우)
* system call이나 Interrupt 발생은 문맥교환이 일어난 것이 아님.
(사용자프로그램 A -> 사용자 프로그램 A)

스케줄러(Scheduler)
Long-term scheduler(장기 스케줄러 or job scheduler)
memory를 주는 문제,시작 프로세스 중 어떤 것을 ready queue로 보낼지 결정
Short-term scheduler (단기 스케줄러 or CPU scheduler)
프로세스에 CPU를 주는 문제, 어떤 프로세스를 running 할 지 결정,충분히 빨라야함
Medium-Term Scheduler (중기 스케줄러 or Swapper)
degree of Multiprogramming을 제어(메모리에 몇개의 프로그램이 올라와있는가), 여유 공간 마련을 위해 프로세스를 통째로 메모리에서 디스크로 쫓아냄

Thread
Process > Thread.
 Program Counter,Register set, stack space만 다름 . 
다른 code section, data section, OS resources 부분은 공유(=task)
장점 : 하나의 스레드가 blocked 상태인 동안에 다른 스레드가 실행되어 빠른 처리가능, 프로세스에서 프로세스로 이동하는 것(문맥교환)은 큰 비용을 초래하기 때문에 쓰레드를 이용.
동일한 일을 수행하는 다중 스레드가 협력해 높은 처리율과 성능 향상 가능(html을 띄울 때 한 쓰레드가 텍스트를 띄우고 다른 쓰레드가 웹서버에 요청해 이미지를 불러오는 효과 처럼 빠른 처리로 보임)
병렬성 높임.
장점 : 반응성(Responsiveness), 자원 공유(Resource Sharing), 경제적(Economy) : 프로세스를 여러개만드는 것보다 스레드를 만드는 것이 30배차이 문맥교환을 따졌을 때는 5배 차이, 멀티프로세스에서의 효과(Utilization of MP Architectures) : 병렬성
운영체제가 아는 쓰레드(Kernel Threads) : 커널에서 지원해주는 쓰레드, 
운영체제가 모르는 쓰레드(User Threads): 프로세스 내부에서 처리

프로세스 생성
부모 프로세스가 자식 프로세스 생성(상속 느낌) 트리(계층구조) 형성
시스템 콜(커널함수 이용)을 이용해 fork() -복제생성, exec() 새로 생성함수 사용
프로세스는 자원을 필요로함(운영체제로부터 받고, 필요시 부모와 공유)
독자적인 주소공간 생성. 자식 프로세스는 부모프로세스 복사

프로세스 종료
exit -자식이 부모에게 output data 보냄(wait)
abort - 부모 프로세스가 자식의 수행종료(자식이 할당 자원의 한계치를 넘어설때, 부모가 exit 하는 경우)

fork() 시스템 콜 - 복제생성, 부모인 경우 양수값. 자식인 경우 0, 자식도 fork 다음줄부터 실행
exec() 시스템 콜 - 새로운 프로세스 생성, execlp 함수 사용(fork 사용 후 새로운 실행을 실행시키기도함), execlp 이후에 명령은 실행 불가,  main 함수부터 실행
wait() 시스템 콜 - 자식 프로세스가 종료될 때까지 부모 프로세스를 wait() 상태(예 : vi A 를 리눅스에서 입력 시 새로운 프로세스가 생성되고 파일을 수정할 수 있는 상태 시 부모 프로세스는 blocked되고 종료되고나서 커멘드 입력 가능)
exit() 시스템 콜 - 
자발적 종료 : 보통 컴파일러가 명령문의 끝에 exit 실행
비자발적 종료 : 부모프로세스가 자식을 강제 종료, 키보드로 kill, 부모가 종료하는 경우

프로세스 간 협력
독립적 프로세스 : 기본적으로 각자의 주소 공간을 가지고 있고 다른 프로세스의 수행에 영향을 미치지 못함
협력 프로세스(IPC : Interprocess Communication) : 
메시지 패싱방법(Masage Passing) - 공유 변수를 사용하지 않고 통신, 운영체제에 시스템 콜 방식으로 다른 프로세스에 메시지 전송, 명시적(프로세스 이름), 비명시적(메시지를 통해 간접 전달)
Shared Memory - 운영체제에게 시스템 콜, 일부 주소 공간을 공유
	*Thread 끼리의 공유는 비교적 쉽게 가능


