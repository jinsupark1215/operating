Logical address(virtual address)
각 프로세스가 독립적으로 갖는 주소공간, 각 프로세스 마다 0번지부터 시작
CPU가 보는 주소는 논리적 주소.
Physical address
메모리에 실제 올라가는 위치

논리적 주소를 물리적 주소로 변환시켜주는 것(하드웨어에서 실행)(Address Binding)
Compile time binding : 컴파일 시 알려짐 , 절대코드 생성
Load time binding : 물리적 메모리 주소 부여, 재배치 가능 코드 생성
runtime binding : 하드웨어적 지원이 필요

주소변환 하드웨어(Memory-Management Unit : MMU)
Logical address를 물리 주소로 매핑해주는 하드웨어
user program : logical address만 봄

Relocation register(base register) : 접근할 수 있는 물리적 메모리 주소의 최소값
Limit register : 논리적 주소의 범위

Dynamic Loading
메모리에 미리 다 올리는 것이 아닌 불려질 때 메모리에 load
memory utilization 향상
많은 양의 코드인 경우 유용
운영체제의 도움 없이 프로그램 자체에서 구현 가능

Overlays
실제 필요한 정보만 메모리에 올림
프로세스 크기가 메모리보다 클 때 유용
운영체제 지원없이 사용자에 의해 구현
메모리가 작던 때의 얘기

Swapping
메모리에서 backing store로 모두 쫓아냄
swap in/ swap out : 중기 스케줄러에 의해 swap out 시킬 프로세스 선정
우선순위 고려해서 쫓아냄.
Compile time binding , Load time binding swap in시 원래의 메모리로 runtime binding은 비어있는 메모리로 올릴 수 있다.

Dynamic Linking
Linking을 실행시간까지 미루는 기법
static Linking : 내가 만들지 않은 라이브러리가 코드에 포함됨, 실행파일의 크기가 커짐. 메모리 낭비
Dynamic linking :  라이브러리가 실행 시 연결됨. 라이브러리 호출 부분에 루틴의 위치를 찾기 위한 stub라는 작은 코드를 둠.(.dll파일)



물리적 메모리 관리기법(Allocation of Physical Memory)
Contiguous allocation(연속할당) : 각각의 프로세스가 메모리의 연속적인 공간에 올라감
: 고정분할 방식 : 미리 나누어 놓음
: 가변분할 방식 : 메모리마다 나눔,  Hole : 가용메모리 공간, 프로세스가 도착하면 수용가능한 hole을 할당
Dynamic Storage-Allocation Problem : 가변분할 방식에서 size를 요청해 적절한 hole을 찾는 문제
First-fit : Size가 n 이상인 것 중 최초로 찾아지는 hole에 할당
Best-fit : Size가 n 이상인 가장 작은 hole을 찾아서 할당
Worst-fit : 가장 큰 hole에 할당
compaction : 사용중인 메모리 영역을 한군데로 몰고 hole을 합치는 것, 비용 많이듬

Noncontiguous allocation(비연속 할당) : 하나의 프로세스가 메모리의 여러 영역에 분산되어 올라감
